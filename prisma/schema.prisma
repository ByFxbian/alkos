// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id        String  @id @default(cuid())
  userId    String
  type      String
  provider  String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope     String?
  id_token  String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        String  @id @default(cuid())
  sessionToken String @unique
  userId    String
  expires   DateTime
  user      User  @relation(fields: [userId], references: [id], onDelete:  Cascade)
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  emailVerified DateTime?
  instagram String?  @unique
  password  String?
  name      String?
  image     String?
  bio       String?
  role      Role     @default(KUNDE)

  completedAppointments   Int       @default(0)
  hasFreeAppointment      Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  appointmentsAsCustomer Appointment[] @relation("CustomerAppointments")

  appointmentsAsBarber   Appointment[] @relation("BarberAppointments")

  availabilities Availability[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  KUNDE
  HEADOFBARBER
  BARBER
  ADMIN
}

model Availability {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0=Sonntag, 1=Montag, 2=Dienstag, etc.
  startTime String   // "HH:mm", z.B. "09:00"
  endTime   String   // "HH:mm", z.B. "18:00"

  barberId  String
  barber    User     @relation(fields: [barberId], references: [id])

  @@index([barberId, dayOfWeek])
}

model Service {
  id          String   @id @default(cuid())
  name        String
  duration    Int
  price       Float

  appointments Appointment[]
}

model Appointment {
  id        String   @id @default(cuid())
  isFree    Boolean  @default(false)
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())

  customerId String
  customer   User   @relation("CustomerAppointments", fields: [customerId], references: [id])

  barberId   String
  barber     User   @relation("BarberAppointments", fields: [barberId], references: [id])

  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])

  stampToken StampToken?

  @@index([barberId, startTime])
  @@index([customerId, startTime])
}

model StampToken {
  id        String   @id @default(cuid())
  token     String   @unique
  appointmentId String @unique
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  expiresAt DateTime
  redeemedAt DateTime?
  createdAt DateTime @default(now())
}